[{"title":"走进Benqio","date":"2017-04-14T02:33:29.000Z","path":"2017/04/14/走进Benqio/","text":"——畅聊和一帮爷们一起奋斗的第一个月 一个月，对于行业的了解逐渐由混沌变得清晰前三个礼拜，纯粹穷忙找不到工作重点，东一榔头西一棒庆幸的是居然每天感觉还很充实应该是新鲜感、好奇心所主导这个星期，能够自我设定明确目标，并为之努力💪这就是时间的的神奇。 浑浑噩噩走过的路： 埋头苦读typescript文档 学习angular2（半途而废，底子薄弱，看不懂，很无奈🤷‍♀️） 竭尽全力了解所谓的工作流（居然还be pround of it） 知晓了grafana、vue-echars-v3、仪表盘adminLte模版的存在（很惭愧现在就只是对这几个单词眼熟而已）…… 看过美丽炫酷的web页面总想人机交互更友好我的天，一个“更”字能够要了我这种患有严重强迫症的人半条老命算了，管不了那么多的planA、B、C…😭这还是我心心念念一直大爱的前端么？ 如梦初醒：空洞的理论学习不大适合脑袋不灵光的我找个项目下手吧，也许这才是条明路！隔壁邻座的耿直boy自然成了我的现实版度娘👍 1.先了解bootstrap-table框架、arttemplate以及seajs的基本用法（混个面熟，看到 不至于一脸懵逼样😳）2.捋清楚整个项目的大体轮廓，选择一个页面模块深入理解3.找到相关页面的代码，通过看、查、问，达到阶段小目标：懂4.归纳整理 学会阅读bootstrap-table官方文档，根据example会运用到实例中 学习layer、jquerysteps等小插件的使用 了解jquery的一些特殊的语法应用，并加以特别记忆 多看几遍，越来越觉得这些大段大段黑压压的代码可爱了😊 Oh,how time flies!我得去挺尸了明天得继续两眼放光的看我那可爱的代码呢！ 晚安，我爱的Soochow！ 4月13日深夜于安静卧室","tags":[{"name":"随笔","slug":"随笔","permalink":"http://cynthia1028.me/tags/随笔/"}]},{"title":"JavaScript知识点复习之作用域、作用域链及闭包","date":"2017-01-09T13:31:18.000Z","path":"2017/01/09/JavaScript知识点复习之作用域、作用域链及闭包/","text":"1 作用域 JavaScript中的函数作用域是指：变量在声明它的函数体以及这个函数体嵌套的任意函数体内都是有定义的。函数体内声明的所有变量（不涉及到赋值）都被提前至函数的顶部声明，这种特性也被称为“声明提前”。 123456function test()&#123; console.log(x); //undefined var x = 10; console.log(x); //10&#125;test(); 全局变量拥有全局作用域，在JavaScript代码的任何地方都可以访问；在函数内部声明的变量只在函数体内有定义，即为局部变量，其作用是局部性的。Notice:在函数体内声明变量时，如果不使用 var 关键字，则将声明全局变量。 123456var x = &quot;global&quot;;function test()&#123; var x = &quot;local&quot;; return x;&#125;console.log(test()); //local 2 作用域链 定义一个函数时(保存了一个作用域链）：创建两个对象————函数对象和全局对象 函数对象：封装了函数的定义，但暂时不读取函数定义。 全局对象：专门保存函数可用的变量所在位置的对象。 当一个函数被调用时：创建一个新对象————活动对象 活动对象：临时封装本次调用函数时使用的局部变量，并将活动对象的引用压入全局对象中。 当函数调用完成后：如果没有其他引用指向此次调用所创建的活动对象，该对象引用出栈，活动对象及其内部的局部变量一同释放。 举个例子： 1234567891011121314var name = &quot;one&quot;;function test()&#123; var name = &quot;two&quot;; function test1()&#123; var name = &quot;three&quot;; console.log(name);//three &#125; function test2()&#123; console.log(name);//two &#125; test1(); test2();&#125;test(); 当成功调用test1()时，顺序为test1()-&gt;test()-&gt;全局对象window,因为在test1()上就找到了name的值three，所以完成搜索返回； 当成功调用test2()时，顺序为test2()-&gt;test()-&gt;全局对象window,因为在test2()上没找到name的值，所以找test()中的，找到了name的值two,就完成搜索返回。 3 闭包 判断闭包的特征： a. 函数嵌套； b. 内层函数使用外层函数的局部变量； c. 内层函数被返回到外部，在外部调用。 举个例子： 123456789var a = 100;function f()&#123; var a = 200; function g()&#123; return a; &#125; return g;&#125;console.log(f()());//200 上述代码意味着，先执行f(),得到该函数内嵌套的一个函数对象g,然后调用这个嵌套函数。 再来个例子，闭包的典型应用： 1234567891011var n = 10;function counter()&#123; var n = 0; var g = function ()&#123; return ++n; &#125;; return g;&#125;var c1 = counter();console.log(c1());//1console.log(c1());//2 何时使用：即要重用变量，又要保护变量不被污染。缺点：占用更多内存空间。 这只是对闭包一个浅浅的理解，后续还会深入透彻理解。","tags":[{"name":"笔记","slug":"笔记","permalink":"http://cynthia1028.me/tags/笔记/"}]},{"title":"开启博客之旅","date":"2016-12-16T13:38:06.000Z","path":"2016/12/16/开启博客之旅/","text":"从听说H5到学习web前端，从阅读简书到开写博客，总该为每一次新的涉猎留下点脚印了……HELLO Blog!","tags":[{"name":"随笔","slug":"随笔","permalink":"http://cynthia1028.me/tags/随笔/"},{"name":"文艺","slug":"文艺","permalink":"http://cynthia1028.me/tags/文艺/"}]},{"title":"Hello World","date":"2016-12-16T13:14:44.000Z","path":"2016/12/16/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]